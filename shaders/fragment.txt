#version 330 core

struct PointLight {
    vec3 position;
    vec3 color;
    float strength;
};

in VS_OUT {
    vec3 FragPos;
    vec3 Normal;
    vec2 TexCoords;
} fs_in;

uniform sampler2D imageTexture;
uniform samplerCube depthMap;

uniform PointLight Light;
uniform vec3 cameraPosition;
uniform bool twoSided;
uniform float far_plane;

vec3 gridSamplingDisk[20] = vec3[]
(
   vec3(1, 1,  1), vec3( 1, -1,  1), vec3(-1, -1,  1), vec3(-1, 1,  1), 
   vec3(1, 1, -1), vec3( 1, -1, -1), vec3(-1, -1, -1), vec3(-1, 1, -1),
   vec3(1, 1,  0), vec3( 1, -1,  0), vec3(-1, -1,  0), vec3(-1, 1,  0),
   vec3(1, 0,  1), vec3(-1,  0,  1), vec3( 1,  0, -1), vec3(-1, 0, -1),
   vec3(0, 1,  1), vec3( 0, -1,  1), vec3( 0, -1, -1), vec3( 0, 1, -1)
);


out vec4 FragColor;

vec3 calculatePointLight(PointLight light, vec3 fragNormal);
float ShadowCalculation(PointLight light, vec3 fragPos);


void main()
{
    vec3 temp = vec3(0,0,0);
    if (gl_FrontFacing) {
        if (twoSided) {
            temp += calculatePointLight(Light, -fs_in.Normal);
            temp.r = min(1.0, temp.r);
            temp.g = min(1.0, temp.g);
            temp.b = min(1.0, temp.b);
            temp = temp / vec3(1.5, 1.5, 1.5);
        } else {
            temp += calculatePointLight(Light, fs_in.Normal);
        }

    } else {
        temp += calculatePointLight(Light, -fs_in.Normal);
    }

    //vec3 fragToLight = fs_in.FragPos - Light.position;
    //vec3 color = texture(depthMap, fragToLight).r;
    //if (color == vec3(1.0, 1.0, 1.0)) {
      //  FragColor = vec4(color, 1);
    //}
    //else {
     //   FragColor = vec4(0.0, 0.0, 0.0, 1);
    //}
    

    FragColor = vec4(temp, 1);
    //FragColor = vec4(vec3(ShadowCalculation(Light, fs_in.FragPos)), 1.0);
    //FragColor = vec4(vec3(gl_FragCoord.z/5), 1.0);
    //FragColor = vec4(vec3(gl_FragCoord.z), 1.0);
}

vec3 calculatePointLight(PointLight light, vec3 fragNormal) {

    vec3 baseTexture = texture(imageTexture, fs_in.TexCoords).rgb;

    float specularStrength = 10.0;

    vec3 lightDir   = normalize(light.position - fs_in.FragPos);
    vec3 viewDir    = normalize(cameraPosition - fs_in.FragPos);
    vec3 halfVec = normalize(lightDir + viewDir);
    vec3 reflectDir = reflect(-lightDir, fragNormal);  
    float distance = length(light.position - fs_in.FragPos);

    //ambient
    vec3 ambient = vec3(0.3) * baseTexture;

    //diffuse
    vec3 diffuse = light.color * light.strength * max(0.0, dot(fragNormal, lightDir)) / (distance * distance);

    //specular
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec3 specular = specularStrength * spec * light.color / (distance * distance);

    float shadow = ShadowCalculation(Light, fs_in.FragPos);                      
    vec3 lighting = (ambient + (1.0 - shadow) * (diffuse + specular)) * light.color; 

    //vec3 lighting = vec3(shadow);

    return lighting;
}

float ShadowCalculation(PointLight light, vec3 fragPos)
{
    // get vector between fragment position and light position
    vec3 fragToLight = fragPos - light.position;
    // use the light to fragment vector to sample from the depth map    
    float closestDepth = texture(depthMap, fragToLight).r;
    // it is currently in linear range between [0,1]. Re-transform back to original value
    closestDepth *= far_plane;
    // now get current linear depth as the length between the fragment and light position
    float currentDepth = length(fragToLight);
    // now test for shadows
    float bias = 0.05; 
    float shadow = currentDepth -  bias > closestDepth ? 1.0 : 0.0;

    return shadow;
}  